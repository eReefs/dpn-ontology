# Disable implicit content negotiation
# (Because we are about to define explicit rules for it)
Options -MultiViews 

# Handle Favicon requests first, before manipulating any other URLs....
RewriteCond  %{REQUEST_URI}  favicon.ico
RewriteCond  "%{ENV:FAVICON_URL}"  ^http
RewriteRule  ^.*$ ${FAVICON_URL}  [P,L]

RewriteCond %{REQUEST_URI}  favicon.ico
RewriteCond "%{ENV:FAVICON_URL}"  !^$
RewriteRule ^.*$ "%{ENV:FAVICON_URL}" [END]

# Handle URLs that are generated by the reverse-proxied LODE application (if any)
# (these also need to be reverse-proxied to the LODE server)
RewriteCond  "%{ENV:LODE_BASEURL}"  ^http
RewriteRule  ^.*(extract|source|client/[^/]+)$  $1  [P,L]

# Derive a variable that can be used to ensure any redirects properly
# respect any X-Forwarded- headers passed with this request
RewriteCond %{HTTPS} ^on$
RewriteRule (.*) - [E=BASEURL:https://%{HTTP_HOST}%{ENV:PATH_PREFIX}]

RewriteCond %{HTTPS} !^on$
RewriteRule (.*) - [E=BASEURL:http://%{HTTP_HOST}%{ENV:PATH_PREFIX}]

RewriteCond %{HTTP:X-Forwarded-Proto}  !^$
RewriteCond %{HTTP:X-Forwarded-Host}  !^$
RewriteRule (.*) - [E=BASEURL:%{HTTP:X-Forwarded-Proto}://%{HTTP:X-Forwarded-Host}%{ENV:PATH_PREFIX}]

# The permalinks for this ontology have URL paths like
# `/dpn/${VERSION}`, `/dpn/dataset/${VERSION}`, `/dpn/services/${VERSION}`
# which do not match the deployed directory structure or filenames.
# Manipulate URLs matching that pattern into the new patterns, like:
# `/${VERSION}/dpn`, `/${VERSION}/dpn-dataset`, `/${VERSION}/dpn-services`.
# (This may take several redirects!)
RewriteRule  ^(.+)/(v\d[\.\d]*|current|latest)/?(.*)/?$  "%{ENV:BASEURL}/$2/$1$3"  [R=303,L]
RewriteRule  ^(.*)dpn/(dataset|services)(.*)$  "%{ENV:BASEURL}/$1dpn-$2$3" [R=303,L]

# If the URL path is empty or *only* a version-path, redirect to the `dpn`
# file for that ontology-version as a directory index.
RewriteRule  ^/?$  "%{ENV:BASEURL}/dpn"  [R=303,L]
RewriteRule  ^(v\d[\.\d]*|current|latest)/?$  "%{ENV:BASEURL}/$1/dpn"  [R=303,L]

# If there is no recognised directory-path in the url,
# then redirect to the current/default version or to the
# latest version in order of preference (only they are set)
RewriteCond  "%{ENV:CURRENT_VERSION}"  !^$
RewriteRule  ^(dpn(-dataset|-services)?.*)$  "%{ENV:BASEURL}/current/$1" [R=303,L]

RewriteCond  "%{ENV:CURRENT_VERSION}"  ^$
RewriteCond  "%{ENV:LATEST_VERSION}"   !^$
RewriteRule  ^(dpn(-dataset|-services)?.*)$  "%{ENV:BASEURL}/latest/$1" [R=303,L]

# From this point, we should have the correct URL structure,
# so stop redirecting to things and start working out what 
# to serve up:

# Handle the configured `current` version being a runtime alias:
RewriteCond  "%{ENV:CURRENT_VERSION}"  !^$
RewriteCond  "%{ENV:CURRENT_VERSION}"  !^current$
RewriteRule  ^current/(.*)$  "%{ENV:CURRENT_VERSION}/$1"  [PT]

# Handle the configured `latest` version being a runtime alias:
RewriteCond  "%{ENV:LATEST_VERSION}"  !^$
RewriteCond  "%{ENV:LATEST_VERSION}"  !^latest$
RewriteRule  ^latest/(.*)$  "%{ENV:LATEST_VERSION}/$1"  [PT]

# For requests that now match an actual file-path exactly, 
# including the file-extension, serve that file up without
# reference to any content-type headers in the request.
RewriteCond  %{REQUEST_FILENAME}  -d [OR]
RewriteCond  %{REQUEST_FILENAME}  -f [OR]
RewriteCond  %{REQUEST_FILENAME}  -l
RewriteRule  ^.*$  -  [END]

# For extensionless file requests of the DPN ontology files,
# it's content-negotiation time. Pick the file extension 
# that best matche the requested MIME type:

# text/turtle => serve the .ttl file if it exists
RewriteCond  %{REQUEST_URI}  dpn(-dataset|-services)?$
RewriteCond  %{HTTP_ACCEPT}  text/turtle
RewriteCond  %{REQUEST_FILENAME}.ttl -f [OR]
RewriteCond  %{REQUEST_FILENAME}.ttl -l
RewriteRule  ^(.*)$  $1.ttl [T=text/turtle,END]

# text/html, application/xhtml+xml
# If LODE_BASEURL is configured, use that for rendering
# the .ttl file to HTML, as either proxy or redirect.
# If LODE_BASEURL is NOT configured, but a local
# pre-rendered .html file is present, serve that.
RewriteCond  %{REQUEST_URI}  dpn(-dataset|-services)?$
RewriteCond  %{HTTP_ACCEPT}  text/html [OR]
RewriteCond  %{HTTP_ACCEPT}  application/xhtml\+xml
RewriteCond  "%{ENV:LODE_BASEURL}"  !^$
RewriteCond  "%{ENV:LODE_PROXY}"  ^true$
RewriteRule  ^(.*)$  "%{ENV:LODE_BASEURL}/extract?module=owlapi&url=%{ENV:BASEURL}/$1.ttl"  [P,T=text/html,L]

RewriteCond  %{REQUEST_URI}  dpn(-dataset|-services)?$
RewriteCond  %{HTTP_ACCEPT}  text/html [OR]
RewriteCond  %{HTTP_ACCEPT}  application/xhtml\+xml
RewriteCond  "%{ENV:LODE_BASEURL}"  !^$
RewriteCond  "%{ENV:LODE_PROXY}"  !^true$
RewriteRule  ^(.*)$  "%{ENV:LODE_BASEURL}/extract?module=owlapi&url=%{ENV:BASEURL}/$1.ttl"  [R=303,L]

RewriteCond  %{REQUEST_URI}  dpn(-dataset|-services)?$
RewriteCond  %{HTTP_ACCEPT}  text/html [OR]
RewriteCond  %{HTTP_ACCEPT}  application/xhtml\+xml
RewriteCond  %{REQUEST_FILENAME}.htm -f [OR]
RewriteCond  %{REQUEST_FILENAME}.htm -l
RewriteRule  ^(.*)$  $1.htm [T=text/html,END]

# RDF or any other un-matched MIME types => default to 
# Serving up the RDF, because at least it renders in the browser, 
# (unlike text/turtle, which defaults to downloading)
RewriteCond  %{REQUEST_URI}  dpn(-dataset|-services)?$
RewriteRule  ^(.*)$  $1.rdf  [T=application/rdf+xml,END]
